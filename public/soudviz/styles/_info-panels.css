/**
 * info-panels.js - Information panels functionality
 * Manages the display of information panels with explanations about each visualization
 */

class InfoPanels {
    constructor() {
        // Dictionary of panel content by visualization type
        this.panelContent = {
            frequencyBars: this.getFrequencyBarsInfo(),
            waveform: this.getWaveformInfo(),
            spectralFlux: this.getSpectralFluxInfo(),
            spectrogram: this.getSpectrogramInfo(),
            bpmTracker: this.getBPMTrackerInfo(),
            energyCircle: this.getEnergyCircleInfo(),
            abstractArt: this.getAbstractArtInfo(),
            centroidVisualizer: this.getCentroidInfo()
        };
        
        // Initialize
        this.setupEventHandlers();
        this.updatePanels();
    }
    
    /**
     * Set up event handlers for info buttons
     */
    setupEventHandlers() {
        // Info button for first visualization
        document.getElementById('info1Button').addEventListener('click', () => {
            const panel = document.getElementById('info1Panel');
            panel.style.display = panel.style.display === 'none' || panel.style.display === '' ? 'block' : 'none';
        });
        
        // Info button for second visualization
        document.getElementById('info2Button').addEventListener('click', () => {
            const panel = document.getElementById('info2Panel');
            panel.style.display = panel.style.display === 'none' || panel.style.display === '' ? 'block' : 'none';
        });
        
        // Update panels when visualization type changes
        document.getElementById('visualizationType1').addEventListener('change', () => {
            this.updatePanels();
        });
        
        document.getElementById('visualizationType2').addEventListener('change', () => {
            this.updatePanels();
        });
    }
    
    /**
     * Update info panels content based on selected visualizations
     */
    updatePanels() {
        const type1 = document.getElementById('visualizationType1').value;
        const type2 = document.getElementById('visualizationType2').value;
        
        document.getElementById('info1Panel').innerHTML = this.panelContent[type1] || this.getDefaultInfo();
        document.getElementById('info2Panel').innerHTML = this.panelContent[type2] || this.getDefaultInfo();
    }
    
    /**
     * Get info content for frequency bars visualization
     * @returns {string} HTML content
     */
    getFrequencyBarsInfo() {
        return `
            <h4>Spectre de Fréquences (FFT)</h4>
            <p>La Transformée de Fourier Rapide (FFT) décompose un signal sonore en ses fréquences constitutives, 
            permettant de visualiser la distribution énergétique du son à travers le spectre audible (20Hz - 20kHz).</p>
            <p>Algorithme : Nous échantillonnons le signal audio puis appliquons la FFT pour obtenir l'amplitude de chaque 
            bande de fréquence.</p>
            <p><code>X(k) = ∑[n=0 to N-1] x(n)e^(-j2πkn/N)</code></p>
            <p>Où <code>x(n)</code> est le signal d'entrée, <code>N</code> est le nombre d'échantillons, et <code>X(k)</code> 
            représente l'amplitude de la fréquence <code>k</code>.</p>
        `;
    }
    
    /**
     * Get info content for waveform visualization
     * @returns {string} HTML content
     */
    getWaveformInfo() {
        return `
            <h4>Forme d'Onde</h4>
            <p>La forme d'onde représente l'amplitude du signal audio au fil du temps, montrant directement 
            les variations de pression acoustique captées par le microphone.</p>
            <p>C'est la représentation la plus fondamentale du signal sonore, permettant d'observer les motifs temporels 
            et l'enveloppe du son.</p>
            <p>Le tracé montre l'amplitude normalisée (entre -1 et 1) sur l'axe Y et le temps sur l'axe X.</p>
        `;
    }
    
    /**
     * Get info content for spectral flux visualization
     * @returns {string} HTML content
     */
    getSpectralFluxInfo() {
        return `
            <h4>Flux Spectral</h4>
            <p>Le flux spectral mesure la vitesse de changement du spectre de fréquences au fil du temps. 
            C'est un excellent indicateur des transitions sonores et des changements dans le contenu audio.</p>
            <p>Algorithme : On calcule la différence entre les spectres de fréquence consécutifs, en ne conservant 
            que les changements positifs (augmentations d'énergie).</p>
            <p><code>flux = ∑ max(|X_t[k] - X_{t-1}[k]|, 0)</code></p>
            <p>Où <code>X_t[k]</code> est l'amplitude de la fréquence <code>k</code> au temps <code>t</code>.</p>
            <p>Les pics dans le flux spectral indiquent souvent des attaques percussives ou des changements brusques 
            dans la musique.</p>
        `;
    }
    
    /**
     * Get info content for spectrogram visualization
     * @returns {string} HTML content
     */
    getSpectrogramInfo() {
        return `
            <h4>Spectrogramme</h4>
            <p>Le spectrogramme est une représentation visuelle tridimensionnelle du signal sonore, montrant 
            l'évolution du spectre de fréquences au fil du temps.</p>
            <p>L'axe vertical représente la fréquence (de bas en haut), l'axe horizontal représente le temps 
            (de gauche à droite), et la couleur représente l'intensité (bleu = faible, rouge = élevée).</p>
            <p>Un spectrogramme permet d'identifier :</p>
            <ul>
                <li>Les harmoniques (lignes horizontales parallèles)</li>
                <li>Les formants vocaux (zones de fréquences renforcées)</li>
                <li>Les percussions (lignes verticales)</li>
                <li>La structure temporelle du son</li>
            </ul>
            <p>L'échelle de fréquence est logarithmique pour mieux représenter la perception humaine des hauteurs.
            Cette visualisation est particulièrement utile pour analyser les caractéristiques spectrales des sons au fil du temps.</p>
        `;
    }
    
    /**
     * Get info content for BPM tracker visualization
     * @returns {string} HTML content
     */
    getBPMTrackerInfo() {
        return `
            <h4>Analyseur de BPM</h4>
            <p>Le BPM (Battements Par Minute) mesure le tempo d'un morceau musical. Notre algorithme détecte les pics 
            d'énergie qui correspondent aux battements.</p>
            <p>Algorithme de détection :</p>
            <ol>
                <li>Extraction de l'énergie dans les basses fréquences (20-250Hz)</li>
                <li>Détection des pics locaux dépassant un seuil adaptatif basé sur l'énergie moyenne</li>
                <li>Filtrage temporel pour éviter les faux positifs</li>
                <li>Calcul des intervalles entre battements consécutifs</li>
                <li>Conversion des intervalles médians en BPM (60000/intervalle_ms)</li>
                <li>Lissage temporel pour stabiliser l'affichage</li>
            </ol>
            <p>La confiance indique la régularité des battements détectés.</p>
            <p>Le tap BPM manuel permet de comparer votre perception du rythme avec le résultat de l'algorithme.</p>
        `;
    }
    
    /**
     * Get info content for energy circle visualization
     * @returns {string} HTML content
     */
    getEnergyCircleInfo() {
        return `
            <h4>Cercle Énergétique</h4>
            <p>Cette visualisation représente l'énergie audio sous forme de cercles interactifs, permettant de 
            comparer facilement l'équilibre entre les graves, médiums et aigus.</p>
            <p>Le cercle principal au centre représente l'énergie totale, tandis que les trois cercles 
            satellites représentent respectivement :</p>
            <ul>
                <li>Rouge : Graves (20-250Hz)</li>
                <li>Vert : Médiums (250-2000Hz)</li>
                <li>Bleu : Aigus (2000-20000Hz)</li>
            </ul>
            <p>La taille de chaque cercle est proportionnelle à l'énergie dans la bande correspondante, 
            et un effet de pulsation est visible lors de la détection d'un battement.</p>
        `;
    }
    
    /**
     * Get info content for abstract art visualization
     * @returns {string} HTML content
     */
    getAbstractArtInfo() {
        return `
            <h4>Art Abstrait</h4>
            <p>Cette visualisation crée des compositions géométriques dynamiques dont les propriétés sont
            directement liées aux caractéristiques audio détectées.</p>
            <p>Trois styles visuels sont disponibles :</p>
            <ul>
                <li><strong>Grille</strong> : Composition orthogonale de rectangles colorés</li>
                <li><strong>Blocs 3D</strong> : Éléments avec effet de profondeur et d'ombrage</li>
                <li><strong>Cercles</strong> : Composition d'éléments circulaires avec des reflets</li>
            </ul>
            <p>Les paramètres audio peuvent être assignés à trois caractéristiques visuelles :</p>
            <ul>
                <li><strong>Couleur</strong> : Contrôle la teinte des éléments de la grille</li>
                <li><strong>Taille</strong> : Définit les dimensions des éléments</li>
                <li><strong>Intensité</strong> : Affecte l'opacité et la saturation des couleurs</li>
            </ul>
            <p>La visualisation réagit aux battements détectés avec des pulsations synchronisées.</p>
            <p>Utilisez les contrôles pour ajuster précisément les associations entre caractéristiques audio et 
            paramètres visuels, ainsi que la taille de la grille et la palette de couleurs.</p>
        `;
    }

    /**
     * Get info content for centroid visualization
     * @returns {string} HTML content
     */
    getCentroidInfo() {
        return `
            <h4>Centroïde Spectral</h4>
            <p>Le centroïde spectral représente le "centre de gravité" du spectre de fréquences, 
            indiquant où se trouve l'énergie moyenne du signal audio.</p>
            <p>En termes simples, il indique si le son est plutôt constitué de basses fréquences (grave)
            ou de hautes fréquences (aigu).</p>
            <p>Formule mathématique :</p>
            <p><code>Centroid = Σ(f[k] * a[k]) / Σ(a[k])</code></p>
            <p>Où <code>f[k]</code> est la fréquence et <code>a[k]</code> l'amplitude de la bande k.</p>
            <p>Cette visualisation affiche la distribution de l'énergie sur l'ensemble du spectre, avec 
            le centroïde marqué par une ligne verticale orange.</p>
            <p>Un son riche en harmoniques aigus déplace le centroïde vers la droite, tandis qu'un son 
            dominé par les basses fréquences le déplace vers la gauche.</p>
        `;
    }
    
    /**
     * Get default info content
     * @returns {string} HTML content
     */
    getDefaultInfo() {
        return `
            <h4>Visualisation Audio</h4>
            <p>Cette visualisation représente les propriétés du signal audio capté par votre microphone.</p>
            <p>Utilisez les contrôles pour ajuster les paramètres et explorer différentes façons de 
            représenter le son.</p>
        `;
    }
}

// Create global instance when document is loaded
document.addEventListener('DOMContentLoaded', () => {
    window.infoPanels = new InfoPanels();
});